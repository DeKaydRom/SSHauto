import paramiko
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='server_automation.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

class SSHManager:
    def __init__(self, hostname, username, password, port=22):
        self.hostname = hostname
        self.username = username
        self.password = password
        self.port = port
        self.client = None

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É."""
        try:
            self.client = paramiko.SSHClient()
            self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.client.connect(
                hostname=self.hostname,
                port=self.port,
                username=self.username,
                password=self.password,
                timeout=10
            )
            logging.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {self.hostname}")
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {self.hostname}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.hostname}: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self.client = None

    def execute_command(self, command):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."""
        if self.client is None:
            logging.error("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
            return "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"

        try:
            stdin, stdout, stderr = self.client.exec_command(command)
            output = stdout.read().decode().strip()
            error = stderr.read().decode().strip()

            if output:
                logging.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã '{command}': {output}")
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:\n{output}")

            if error:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è '{command}': {error}")
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞:\n{error}")

            return output if output else error

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è '{command}': {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")

    def close_connection(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ SSH-—Å–µ—Å—Å–∏–∏."""
        if self.client:
            self.client.close()
            logging.info(f"üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å {self.hostname} –∑–∞–∫—Ä—ã—Ç–æ.")
            print(f"üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")

# -----------------------------
# ‚úÖ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    server_info = {
        "hostname": "your_server_ip",
        "username": "your_username",
        "password": "your_password"
    }

    # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    commands = [
        "whoami",             # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        "uptime",             # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
        "df -h",              # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞
        "free -m",            # –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
        "uname -a"            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
    ]

    ssh_manager = SSHManager(**server_info)
    ssh_manager.connect()

    for cmd in commands:
        ssh_manager.execute_command(cmd)

    ssh_manager.close_connection()
